{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 114, "column": 0}, "map": {"version":3,"sources":["file:///Users/diana/Learning/01-Web-Dev/16-Nextjs/nextjs-dashboard/app/lib/actions.ts"],"sourcesContent":["\"use server\";\n\nimport { z } from \"zod\";\nimport { sql } from \"@vercel/postgres\";\nimport { revalidatePath } from \"next/cache\";\nimport { redirect } from \"next/navigation\";\n\nconst FormSchema = z.object({\n  id: z.string(),\n  customerId: z.string(),\n  amount: z.coerce.number(),\n  status: z.enum([\"pending\", \"paid\"]),\n  date: z.string(),\n});\n\nconst CreateInvoice = FormSchema.omit({ id: true, date: true });\n\n// Use Zod to update the expected types\nconst UpdateInvoice = FormSchema.omit({ id: true, date: true });\n\n// Create Invoice\nexport async function createInvoice(formData: FormData) {\n  const { customerId, amount, status } = CreateInvoice.parse({\n    customerId: formData.get(\"customerId\"),\n    amount: formData.get(\"amount\"),\n    status: formData.get(\"status\"),\n  });\n\n  const amountInCents = amount * 100;\n  const date = new Date().toISOString().split(\"T\")[0];\n\n  try {\n    await sql`\n    INSERT INTO invoices (customer_id, amount, status, date)\n    VALUES (${customerId}, ${amountInCents}, ${status}, ${date})\n  `;\n  } catch (error) {\n    return {\n      message: \"Database Error: Failed to Create Invoice.\",\n    };\n  }\n\n  // After updating the database, the /dashboard/invoices path will be revalidated,\n  // and fresh data will be fetched from the server\n  revalidatePath(\"/dashboard/invoices\");\n\n  // Redirect to the /dashboard/invoices route on submission\n  redirect(\"/dashboard/invoices\");\n}\n\n// Update Invoice\nexport async function updateInvoice(id: string, formData: FormData) {\n  const { customerId, amount, status } = UpdateInvoice.parse({\n    customerId: formData.get(\"customerId\"),\n    amount: formData.get(\"amount\"),\n    status: formData.get(\"status\"),\n  });\n\n  const amountInCents = amount * 100;\n\n  try {\n    await sql`\n    UPDATE invoices\n    SET customer_id = ${customerId}, amount = ${amountInCents}, status = ${status}\n    WHERE id = ${id}\n  `;\n  } catch (error) {\n    return {\n      message: \"Database Error: Failed to Update Invoice.\",\n    };\n  }\n\n  revalidatePath(\"/dashboard/invoices\");\n  redirect(\"/dashboard/invoices\");\n}\n\n// Delete Invoice\nexport async function deleteInvoice(id: string) {\n  try {\n    await sql`DELETE FROM invoices WHERE id = ${id}`;\n    revalidatePath(\"/dashboard/invoices\");\n  } catch (error) {\n    return {\n      message: \"Database Error: Failed to Delete Invoice.\",\n    };\n  }\n}\n"],"names":[],"mappings":";;;;;;;AAGA;AACA;AACA;;AAHA;AACA;AAEA;;;;;;;AAEA,MAAM,aAAa,qLAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC1B,IAAI,qLAAA,CAAA,IAAC,CAAC,MAAM;IACZ,YAAY,qLAAA,CAAA,IAAC,CAAC,MAAM;IACpB,QAAQ,qLAAA,CAAA,IAAC,CAAC,MAAM,CAAC,MAAM;IACvB,QAAQ,qLAAA,CAAA,IAAC,CAAC,IAAI,CAAC;QAAC;QAAW;KAAO;IAClC,MAAM,qLAAA,CAAA,IAAC,CAAC,MAAM;AAChB;AAEA,MAAM,gBAAgB,WAAW,IAAI,CAAC;IAAE,IAAI;IAAM,MAAM;AAAK;AAE7D,uCAAuC;AACvC,MAAM,gBAAgB,WAAW,IAAI,CAAC;IAAE,IAAI;IAAM,MAAM;AAAK;AAGtD,eAAe,cAAc,QAAkB;IACpD,MAAM,EAAE,UAAU,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG,cAAc,KAAK,CAAC;QACzD,YAAY,SAAS,GAAG,CAAC;QACzB,QAAQ,SAAS,GAAG,CAAC;QACrB,QAAQ,SAAS,GAAG,CAAC;IACvB;IAEA,MAAM,gBAAgB,SAAS;IAC/B,MAAM,OAAO,IAAI,OAAO,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE;IAEnD,IAAI;QACF,MAAM,uRAAA,CAAA,MAAG,CAAC;;YAEF,EAAE,WAAW,EAAE,EAAE,cAAc,EAAE,EAAE,OAAO,EAAE,EAAE,KAAK;EAC7D,CAAC;IACD,EAAE,OAAO,OAAO;QACd,OAAO;YACL,SAAS;QACX;IACF;IAEA,iFAAiF;IACjF,iDAAiD;IACjD,CAAA,GAAA,4PAAA,CAAA,iBAAc,AAAD,EAAE;IAEf,0DAA0D;IAC1D,CAAA,GAAA,oTAAA,CAAA,WAAQ,AAAD,EAAE;AACX;AAGO,eAAe,cAAc,EAAU,EAAE,QAAkB;IAChE,MAAM,EAAE,UAAU,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG,cAAc,KAAK,CAAC;QACzD,YAAY,SAAS,GAAG,CAAC;QACzB,QAAQ,SAAS,GAAG,CAAC;QACrB,QAAQ,SAAS,GAAG,CAAC;IACvB;IAEA,MAAM,gBAAgB,SAAS;IAE/B,IAAI;QACF,MAAM,uRAAA,CAAA,MAAG,CAAC;;sBAEQ,EAAE,WAAW,WAAW,EAAE,cAAc,WAAW,EAAE,OAAO;eACnE,EAAE,GAAG;EAClB,CAAC;IACD,EAAE,OAAO,OAAO;QACd,OAAO;YACL,SAAS;QACX;IACF;IAEA,CAAA,GAAA,4PAAA,CAAA,iBAAc,AAAD,EAAE;IACf,CAAA,GAAA,oTAAA,CAAA,WAAQ,AAAD,EAAE;AACX;AAGO,eAAe,cAAc,EAAU;IAC5C,IAAI;QACF,MAAM,uRAAA,CAAA,MAAG,CAAC,gCAAgC,EAAE,GAAG,CAAC;QAChD,CAAA,GAAA,4PAAA,CAAA,iBAAc,AAAD,EAAE;IACjB,EAAE,OAAO,OAAO;QACd,OAAO;YACL,SAAS;QACX;IACF;AACF;;;IAjEsB;IA8BA;IA0BA;;AAxDA,8WAAA;AA8BA,8WAAA;AA0BA,8WAAA"}},
    {"offset": {"line": 217, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 223, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 227, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}